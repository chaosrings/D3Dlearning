//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer PerObject
{
    float4x4 g_worldViewProj;           // Offset:    0, size:   64
}

//
// 4 local object(s)
//
TextureCube g_cubeMap;
SamplerState samTexture
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState CounterClockFrontRS
{
    FrontCounterClockwise = bool(TRUE /* true */);
};
DepthStencilState LessEqualDSS
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 SkyBoxTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.posL.x; v0.y <- vin.posL.y; v0.z <- vin.posL.z; 
                //   o1.x <- <VS return value>.posL.x; o1.y <- <VS return value>.posL.y; o1.z <- <VS return value>.posL.z; 
                //   o0.x <- <VS return value>.posH.x; o0.y <- <VS return value>.posH.y; o0.z <- <VS return value>.posH.z; o0.w <- <VS return value>.posH.w
                //
                #line 30 "C:\Users\ashone\Documents\Visual Studio 2015\Projects\D3Dlearning\D3Dlearning\FX\CubeMapping.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.posL.x; r0.y <- vout.posL.y; r0.z <- vout.posL.z
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[0].xyzw  // r2.x <- vout.posH.x
                dp4 r2.y, r1.xyzw, cb0[1].xyzw  // r2.y <- vout.posH.y
                dp4 r2.w, r1.xyzw, cb0[3].xyzw
                mov r2.zw, r2.wwww  // r2.z <- vout.posH.z; r2.w <- vout.posH.w
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                ret 
                // Approximately 10 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samTexture                        sampler      NA          NA    0        1
                // g_cubeMap                         texture  float4        cube    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.posH.x; v0.y <- pin.posH.y; v0.z <- pin.posH.z; v0.w <- pin.posH.w; 
                //   v1.x <- pin.posL.x; v1.y <- pin.posL.y; v1.z <- pin.posL.z; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 38 "C:\Users\ashone\Documents\Visual Studio 2015\Projects\D3Dlearning\D3Dlearning\FX\CubeMapping.fx"
                sample_indexable(texturecube)(float,float,float,float) o0.xyzw, v1.xyzx, t0.xyzw, s0
                ret 
                // Approximately 2 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = LessEqualDSS;
            RasterizerState = CounterClockFrontRS;
        }

    }

}

